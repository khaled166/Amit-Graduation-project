
Master_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000038e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c04  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000859  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066a  00000000  00000000  00001941  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00001fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bc  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d5  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002881  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  74:	0c 94 8b 01 	jmp	0x316	; 0x316 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Bluetooth_init>:
#include "bluetooth.h"



void Bluetooth_init(void){
	UART_INIT();
  7c:	0e 94 6f 01 	call	0x2de	; 0x2de <UART_INIT>
  80:	08 95       	ret

00000082 <Bluetooth_send_data>:
}

uint8 Bluetooth_send_data(void){
	uint8 Data=0;
	Data=UART_Receive_Data();
  82:	0e 94 87 01 	call	0x30e	; 0x30e <UART_Receive_Data>
	return Data;
}
  86:	08 95       	ret

00000088 <DIO_SetPinDir>:

		break;

	case DIO_PORTD :

		PORTD = Val;
  88:	44 23       	and	r20, r20
  8a:	b9 f1       	breq	.+110    	; 0xfa <DIO_SetPinDir+0x72>
  8c:	41 30       	cpi	r20, 0x01	; 1
  8e:	09 f0       	breq	.+2      	; 0x92 <DIO_SetPinDir+0xa>
  90:	6b c0       	rjmp	.+214    	; 0x168 <DIO_SetPinDir+0xe0>
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	89 f0       	breq	.+34     	; 0xb8 <DIO_SetPinDir+0x30>
  96:	28 f0       	brcs	.+10     	; 0xa2 <DIO_SetPinDir+0x1a>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	c9 f0       	breq	.+50     	; 0xce <DIO_SetPinDir+0x46>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	11 f1       	breq	.+68     	; 0xe4 <DIO_SetPinDir+0x5c>
  a0:	08 95       	ret
  a2:	2a b3       	in	r18, 0x1a	; 26
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_SetPinDir+0x26>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_SetPinDir+0x22>
  b2:	82 2b       	or	r24, r18
  b4:	8a bb       	out	0x1a, r24	; 26
  b6:	08 95       	ret
  b8:	27 b3       	in	r18, 0x17	; 23
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_SetPinDir+0x3c>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_SetPinDir+0x38>
  c8:	82 2b       	or	r24, r18
  ca:	87 bb       	out	0x17, r24	; 23
  cc:	08 95       	ret
  ce:	24 b3       	in	r18, 0x14	; 20
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_SetPinDir+0x52>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_SetPinDir+0x4e>
  de:	82 2b       	or	r24, r18
  e0:	84 bb       	out	0x14, r24	; 20
  e2:	08 95       	ret
  e4:	21 b3       	in	r18, 0x11	; 17
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_SetPinDir+0x68>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_SetPinDir+0x64>
  f4:	82 2b       	or	r24, r18
  f6:	81 bb       	out	0x11, r24	; 17
  f8:	08 95       	ret
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	91 f0       	breq	.+36     	; 0x122 <DIO_SetPinDir+0x9a>
  fe:	28 f0       	brcs	.+10     	; 0x10a <DIO_SetPinDir+0x82>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	d9 f0       	breq	.+54     	; 0x13a <DIO_SetPinDir+0xb2>
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	29 f1       	breq	.+74     	; 0x152 <DIO_SetPinDir+0xca>
 108:	08 95       	ret
 10a:	2a b3       	in	r18, 0x1a	; 26
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_SetPinDir+0x8e>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_SetPinDir+0x8a>
 11a:	80 95       	com	r24
 11c:	82 23       	and	r24, r18
 11e:	8a bb       	out	0x1a, r24	; 26
 120:	08 95       	ret
 122:	27 b3       	in	r18, 0x17	; 23
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPinDir+0xa6>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPinDir+0xa2>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	87 bb       	out	0x17, r24	; 23
 138:	08 95       	ret
 13a:	24 b3       	in	r18, 0x14	; 20
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_SetPinDir+0xbe>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_SetPinDir+0xba>
 14a:	80 95       	com	r24
 14c:	82 23       	and	r24, r18
 14e:	84 bb       	out	0x14, r24	; 20
 150:	08 95       	ret
 152:	21 b3       	in	r18, 0x11	; 17
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_SetPinDir+0xd6>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_SetPinDir+0xd2>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	81 bb       	out	0x11, r24	; 17
 168:	08 95       	ret

0000016a <DIO_WritePin>:



void DIO_WritePin(uint8 Port ,uint8 Pin, uint8 Val)
{
	switch (Val)
 16a:	44 23       	and	r20, r20
 16c:	b9 f1       	breq	.+110    	; 0x1dc <DIO_WritePin+0x72>
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	09 f0       	breq	.+2      	; 0x174 <DIO_WritePin+0xa>
 172:	6b c0       	rjmp	.+214    	; 0x24a <DIO_WritePin+0xe0>


	case DIO_PIN_HIGH :


		switch (Port)
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	89 f0       	breq	.+34     	; 0x19a <DIO_WritePin+0x30>
 178:	28 f0       	brcs	.+10     	; 0x184 <DIO_WritePin+0x1a>
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	c9 f0       	breq	.+50     	; 0x1b0 <DIO_WritePin+0x46>
 17e:	83 30       	cpi	r24, 0x03	; 3
 180:	11 f1       	breq	.+68     	; 0x1c6 <DIO_WritePin+0x5c>
 182:	08 95       	ret
		{
		case DIO_PORTA :

			SET_BIT(PORTA,Pin);
 184:	2b b3       	in	r18, 0x1b	; 27
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_WritePin+0x26>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_WritePin+0x22>
 194:	82 2b       	or	r24, r18
 196:	8b bb       	out	0x1b, r24	; 27

			break;
 198:	08 95       	ret

		case DIO_PORTB :

			SET_BIT(PORTB,Pin);
 19a:	28 b3       	in	r18, 0x18	; 24
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_WritePin+0x3c>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_WritePin+0x38>
 1aa:	82 2b       	or	r24, r18
 1ac:	88 bb       	out	0x18, r24	; 24

			break;
 1ae:	08 95       	ret

		case DIO_PORTC :

			SET_BIT(PORTC,Pin);
 1b0:	25 b3       	in	r18, 0x15	; 21
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_WritePin+0x52>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_WritePin+0x4e>
 1c0:	82 2b       	or	r24, r18
 1c2:	85 bb       	out	0x15, r24	; 21

			break;
 1c4:	08 95       	ret

		case DIO_PORTD :

			SET_BIT(PORTD,Pin);
 1c6:	22 b3       	in	r18, 0x12	; 18
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_WritePin+0x68>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_WritePin+0x64>
 1d6:	82 2b       	or	r24, r18
 1d8:	82 bb       	out	0x12, r24	; 18

			break;
 1da:	08 95       	ret
		break;

		case DIO_PIN_LOW :


			switch (Port)
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	91 f0       	breq	.+36     	; 0x204 <DIO_WritePin+0x9a>
 1e0:	28 f0       	brcs	.+10     	; 0x1ec <DIO_WritePin+0x82>
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	d9 f0       	breq	.+54     	; 0x21c <DIO_WritePin+0xb2>
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	29 f1       	breq	.+74     	; 0x234 <DIO_WritePin+0xca>
 1ea:	08 95       	ret
			{
			case DIO_PORTA :

				CLR_BIT(PORTA,Pin);
 1ec:	2b b3       	in	r18, 0x1b	; 27
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_WritePin+0x8e>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_WritePin+0x8a>
 1fc:	80 95       	com	r24
 1fe:	82 23       	and	r24, r18
 200:	8b bb       	out	0x1b, r24	; 27

				break;
 202:	08 95       	ret

			case DIO_PORTB :

				CLR_BIT(PORTB,Pin);
 204:	28 b3       	in	r18, 0x18	; 24
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_WritePin+0xa6>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_WritePin+0xa2>
 214:	80 95       	com	r24
 216:	82 23       	and	r24, r18
 218:	88 bb       	out	0x18, r24	; 24

				break;
 21a:	08 95       	ret

			case DIO_PORTC :

				CLR_BIT(PORTC,Pin);
 21c:	25 b3       	in	r18, 0x15	; 21
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_WritePin+0xbe>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_WritePin+0xba>
 22c:	80 95       	com	r24
 22e:	82 23       	and	r24, r18
 230:	85 bb       	out	0x15, r24	; 21

				break;
 232:	08 95       	ret

			case DIO_PORTD :

				CLR_BIT(PORTD,Pin);
 234:	22 b3       	in	r18, 0x12	; 18
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_WritePin+0xd6>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_WritePin+0xd2>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	82 bb       	out	0x12, r24	; 18
 24a:	08 95       	ret

0000024c <main>:
#define Home_Devices_OFF   '2'
uint8 Control_Home_Appliance=0;
uint8 RX_Data=0;
int main(void)
{      
	  Bluetooth_init();
 24c:	0e 94 3e 00 	call	0x7c	; 0x7c <Bluetooth_init>
	  Master_spi_init();
 250:	0e 94 4c 01 	call	0x298	; 0x298 <Master_spi_init>
	  spi_trans_init();
 254:	0e 94 64 01 	call	0x2c8	; 0x2c8 <spi_trans_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	89 e6       	ldi	r24, 0x69	; 105
 25c:	98 e1       	ldi	r25, 0x18	; 24
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <main+0x12>
 266:	00 c0       	rjmp	.+0      	; 0x268 <main+0x1c>
 268:	00 00       	nop
	  _delay_ms(1000);
    while (1) 
    {
		Control_Home_Appliance=Bluetooth_send_data();
 26a:	0e 94 41 00 	call	0x82	; 0x82 <Bluetooth_send_data>
 26e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Control_Home_Appliance>
		if(Control_Home_Appliance==Home_Devices_ON){
 272:	81 33       	cpi	r24, 0x31	; 49
 274:	31 f4       	brne	.+12     	; 0x282 <main+0x36>
		  RX_Data=spi_RX_TX(Bluetooth_send_data()); 
 276:	0e 94 41 00 	call	0x82	; 0x82 <Bluetooth_send_data>
 27a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <spi_RX_TX>
 27e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		if(Control_Home_Appliance==Home_Devices_OFF){
 282:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Control_Home_Appliance>
 286:	82 33       	cpi	r24, 0x32	; 50
 288:	81 f7       	brne	.-32     	; 0x26a <main+0x1e>
	      RX_Data=spi_RX_TX(Bluetooth_send_data());
 28a:	0e 94 41 00 	call	0x82	; 0x82 <Bluetooth_send_data>
 28e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <spi_RX_TX>
 292:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 296:	e9 cf       	rjmp	.-46     	; 0x26a <main+0x1e>

00000298 <Master_spi_init>:


#include "SPI.h"

void Master_spi_init(void){
	DIO_SetPinDir(DIO_PORTA,DIO_PIN0,DIO_PIN_OUTPUT);
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 44 00 	call	0x88	; 0x88 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB,DIO_PIN5,DIO_PIN_OUTPUT);
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	65 e0       	ldi	r22, 0x05	; 5
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 44 00 	call	0x88	; 0x88 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB,DIO_PIN6,DIO_PIN_INPUT);
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	66 e0       	ldi	r22, 0x06	; 6
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 44 00 	call	0x88	; 0x88 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB,DIO_PIN7,DIO_PIN_OUTPUT);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	67 e0       	ldi	r22, 0x07	; 7
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 44 00 	call	0x88	; 0x88 <DIO_SetPinDir>
	
	SET_BIT(SPCR,6);
 2c0:	6e 9a       	sbi	0x0d, 6	; 13
	SET_BIT(SPCR,4);
 2c2:	6c 9a       	sbi	0x0d, 4	; 13
	SET_BIT(SPCR,1);
 2c4:	69 9a       	sbi	0x0d, 1	; 13
 2c6:	08 95       	ret

000002c8 <spi_trans_init>:
}
void spi_trans_init(void){
	DIO_WritePin(DIO_PORTA,DIO_PIN0,DIO_PIN_LOW);
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_WritePin>
 2d2:	08 95       	ret

000002d4 <spi_RX_TX>:
}
uint8 spi_RX_TX(uint8 trans_Data){
	
	uint8 rec_Data=0;
	SPDR=trans_Data;
 2d4:	8f b9       	out	0x0f, r24	; 15
	while(GET_BIT(SPSR,7)==0);
 2d6:	77 9b       	sbis	0x0e, 7	; 14
 2d8:	fe cf       	rjmp	.-4      	; 0x2d6 <spi_RX_TX+0x2>
	rec_Data=SPDR;
 2da:	8f b1       	in	r24, 0x0f	; 15
	return rec_Data;
}
 2dc:	08 95       	ret

000002de <UART_INIT>:
#include "UART.h"


void UART_INIT(void){
	
	DIO_SetPinDir(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);       // DIO RXD initialized as input pin 
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	0e 94 44 00 	call	0x88	; 0x88 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);      // DIO_TXD initialized as output pin
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	0e 94 44 00 	call	0x88	; 0x88 <DIO_SetPinDir>
	
	SET_BIT(UCSRB,3);     //Enable uart receiver bit
 2f2:	53 9a       	sbi	0x0a, 3	; 10
 	SET_BIT(UCSRB,4);     //Enable uart transmitter bit 
 2f4:	54 9a       	sbi	0x0a, 4	; 10
	SET_BIT(UCSRC,1);     //to select 8-bit character size
 2f6:	80 b5       	in	r24, 0x20	; 32
 2f8:	82 60       	ori	r24, 0x02	; 2
 2fa:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC,2);     //to select 8_bit character size 
 2fc:	80 b5       	in	r24, 0x20	; 32
 2fe:	84 60       	ori	r24, 0x04	; 4
 300:	80 bd       	out	0x20, r24	; 32
	SET_BIT(UCSRC,7);     //allow accessing on UCSRC register
 302:	80 b5       	in	r24, 0x20	; 32
 304:	80 68       	ori	r24, 0x80	; 128
 306:	80 bd       	out	0x20, r24	; 32
	UBRRL=51;             //baud rate 9600 F_CPU 8MHZ 
 308:	83 e3       	ldi	r24, 0x33	; 51
 30a:	89 b9       	out	0x09, r24	; 9
 30c:	08 95       	ret

0000030e <UART_Receive_Data>:
}
uint8 UART_Receive_Data(void){
	uint8 Data=0;                //Data send to the receiver device.
	while(GET_BIT(UCSRA,7)==0);  //check if there is a new data received or not. 
 30e:	5f 9b       	sbis	0x0b, 7	; 11
 310:	fe cf       	rjmp	.-4      	; 0x30e <UART_Receive_Data>
	Data= UDR;                   //new data sent to the UDR register
 312:	8c b1       	in	r24, 0x0c	; 12
	return Data;                 
 314:	08 95       	ret

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
